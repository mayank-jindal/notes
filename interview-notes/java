Java

As of now refer to below links for notes

java8 - https://www.interviewbit.com/java-8-interview-questions/#what-is-lambda-expression-in-java
java8 - https://www.youtube.com/watch?v=k7fNLXoVCYg
design patterns - https://www.youtube.com/watch?v=JFvSCobD7JU&t=242s
solid principles - https://www.youtube.com/watch?v=BM_lSZPMClo
multithreading - https://www.interviewbit.com/multithreading-interview-questions/

Space Allocation

In Java, space allocation (memory management) is managed automatically by the Java Virtual Machine (JVM). The JVM divides memory into different regions to optimize the execution of Java applications. The primary areas of memory management in Java are:

1. Heap Memory
Heap memory is the runtime data area from which memory for all class instances and arrays is allocated. It is divided into several generations for efficient garbage collection:

Young Generation: This is where all new objects are allocated. It is further divided into:
    Eden Space: Newly created objects start here.
    Survivor Spaces (S0 and S1): After surviving a garbage collection cycle in the Eden space, objects are moved to survivor spaces.

Old Generation (Tenured Generation): Objects that have survived multiple garbage collection cycles in the young generation are moved to the old generation. This space is used to store long-lived objects.

Permanent Generation (Metaspace): Prior to Java 8, this was used to store metadata about classes and methods. From Java 8 onwards, Metaspace replaced the PermGen and is part of native memory. Metaspace automatically expands and contracts as needed.

2. Stack Memory
Stack memory is used for the execution of a thread. Each thread has its own stack, which stores local variables, method call information, and partial results. Stack memory is divided into stack frames, one for each method call.

3. Method Area
The method area stores class structures such as runtime constant pool, field and method data, and the code for methods and constructors, including the special methods used for class and instance initialization and interface initialization.

4. Native Method Stack
This area is used for native method stacks, which are used by native methods (written in languages other than Java, such as C or C++).

Space Allocation Process

1. Object Creation: When an object is created using the new keyword, memory is allocated from the heap, specifically
from the Eden space in the young generation.

2. Variable Storage:
    Instance Variables: Stored in the heap.
    Local Variables: Stored in the stack.

3. Method Invocation: When a method is invoked, a new frame is created and pushed onto the thread's stack. The frame
contains:
    Local variables
    Operand stack
    Constant pool reference

4. Garbage Collection:
    Minor GC: Collects garbage from the young generation. If an object survives a minor GC, it may be moved to a survivor space or, eventually, to the old generation.
    Major GC: Collects garbage from the old generation.
    Metaspace Collection: Managed by the JVM, Metaspace grows and shrinks as needed without manual intervention.

Example

Consider the following Java code:

public class MemoryExample {
    private int instanceVar;

    public void methodExample() {
        int localVar = 10;
        MyObject obj = new MyObject();
    }
}
instanceVar is an instance variable, stored in the heap.
localVar is a local variable, stored in the stack.
obj is a reference to an object, with the reference itself stored in the stack and the actual object stored in the heap.

Summary

Java memory management is primarily handled through automatic garbage collection, which helps in reclaiming memory
that is no longer in use. The JVMs memory model divides memory into distinct areas such as heap, stack, and method area to efficiently manage the execution and storage of Java applications. Understanding these areas and the process of space allocation helps in writing optimized and memory-efficient Java programs.